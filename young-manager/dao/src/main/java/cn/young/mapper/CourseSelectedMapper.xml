<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.young.mapper.CourseSelectedMapper">
  <resultMap id="BaseResultMap" type="cn.young.manager.pojo.CourseSelected">
    <result column="cid" jdbcType="BIGINT" property="cid" />
    <result column="uid" jdbcType="BIGINT" property="uid" />
    <result column="course_code" jdbcType="VARCHAR" property="courseCode" />
    <result column="mark" jdbcType="INTEGER" property="mark" />
    <result column="content_date" jdbcType="DATE" property="contentDate" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="ischoose" jdbcType="INTEGER" property="ischoose" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.young.manager.pojo.CourseSelected">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    cid, uid, course_code, mark, content_date, status, ischoose
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.young.manager.pojo.CourseSelectedExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from course_selected
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.young.manager.pojo.CourseSelectedExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from course_selected
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="cn.young.manager.pojo.CourseSelectedExample">
    delete from course_selected
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.young.manager.pojo.CourseSelected">
    insert into course_selected (cid, uid, course_code, 
      mark, content_date, status, 
      ischoose, content)
    values (#{cid,jdbcType=BIGINT}, #{uid,jdbcType=BIGINT}, #{courseCode,jdbcType=VARCHAR}, 
      #{mark,jdbcType=INTEGER}, #{contentDate,jdbcType=DATE}, #{status,jdbcType=INTEGER}, 
      #{ischoose,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.young.manager.pojo.CourseSelected">
    insert into course_selected
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cid != null">
        cid,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="courseCode != null">
        course_code,
      </if>
      <if test="mark != null">
        mark,
      </if>
      <if test="contentDate != null">
        content_date,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="ischoose != null">
        ischoose,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cid != null">
        #{cid,jdbcType=BIGINT},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="courseCode != null">
        #{courseCode,jdbcType=VARCHAR},
      </if>
      <if test="mark != null">
        #{mark,jdbcType=INTEGER},
      </if>
      <if test="contentDate != null">
        #{contentDate,jdbcType=DATE},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="ischoose != null">
        #{ischoose,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.young.manager.pojo.CourseSelectedExample" resultType="java.lang.Long">
    select count(*) from course_selected
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update course_selected
    <set>
      <if test="record.cid != null">
        cid = #{record.cid,jdbcType=BIGINT},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=BIGINT},
      </if>
      <if test="record.courseCode != null">
        course_code = #{record.courseCode,jdbcType=VARCHAR},
      </if>
      <if test="record.mark != null">
        mark = #{record.mark,jdbcType=INTEGER},
      </if>
      <if test="record.contentDate != null">
        content_date = #{record.contentDate,jdbcType=DATE},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.ischoose != null">
        ischoose = #{record.ischoose,jdbcType=INTEGER},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update course_selected
    set cid = #{record.cid,jdbcType=BIGINT},
      uid = #{record.uid,jdbcType=BIGINT},
      course_code = #{record.courseCode,jdbcType=VARCHAR},
      mark = #{record.mark,jdbcType=INTEGER},
      content_date = #{record.contentDate,jdbcType=DATE},
      status = #{record.status,jdbcType=INTEGER},
      ischoose = #{record.ischoose,jdbcType=INTEGER},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update course_selected
    set cid = #{record.cid,jdbcType=BIGINT},
      uid = #{record.uid,jdbcType=BIGINT},
      course_code = #{record.courseCode,jdbcType=VARCHAR},
      mark = #{record.mark,jdbcType=INTEGER},
      content_date = #{record.contentDate,jdbcType=DATE},
      status = #{record.status,jdbcType=INTEGER},
      ischoose = #{record.ischoose,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="clearEvaluation" parameterType="map">
    update course_selected
    set
      mark = null ,
      content = null,
      content_date = null
    where cid = #{cid} and uid = #{uid}
  </update>

  <!--id是接口中的方法名，结果类型如没有在mybatis.xml文件中配置别名，则resultType必须使用全名称（包名+类名） -->
  <!--带走/取出什么-->
  <!-- 章海翔 -->
  <select id="getAllRemarkByCourse_code"  resultMap="BaseResultMap">
    select
      uid, mark, content, content_date
    from course_selected
    where course_code = #{course_code}
    order by content_date desc
  </select>

  <!--曾经是否选过。选过的话修改那一行的ischoose，会返回1。否则还得插入-->
  <update id="updateCourseSelectedToChoose">
    update course_selected
    SET ischoose = 1
    WHERE cid = #{cid} and uid = #{uid}
  </update>

  <!--插入新的选课行！！但是插之前，注意另一表course的人数限制！！！-->
  <insert id="insertCourseSelected">
    insert into course_selected (cid, uid, course_code, ischoose)
    VALUES (#{cid}, #{uid}, #{course_code}, 1 )
  </insert>

  <!--根据课程和用户，更新ischoose为0-->
  <update id="updateCourseSelectedToQuit">
    update course_selected
    SET ischoose = 0
    WHERE cid = #{cid} and uid = #{uid}
  </update>

  <!--用户是否已选课-->
  <select id="hasChoosed" resultType="Integer">
    select IFNULL(ischoose,0)
    from course_selected
    where cid = #{cid} and uid = #{uid}
  </select>

  <!--选出限定范围内的用户评价数据-->
  <select id="getLimitedRemarkByCourse_code" resultType="cn.young.manager.pojo.CourseSelected">
        select uid,
               mark,
               content,
               content_date
        from course_selected
        where course_code = #{course_code}
        limit #{index}, #{limit}
    </select>

  <!-- 选出这门课程编号下的评价总数 -->
  <select id="getRemarkNumByCourse_code" resultType="int">
        select count(*)
        from course_selected
        where course_code = #{course_code}
    </select>

  <!--选出对应uid下的cid-->
  <select id="getCidByUid" resultType="INTEGER">
        select cid
        from course_selected
        where uid = #{uid}
    </select>

  <!-- 查找用户选课总数 -->
  <select id="getSelectedCountByUid" resultType="int">
        select count(*)
        from course_selected
        where uid = #{uid}
          and ischoose = 1;
    </select>

  <!--选出对应uid下的cid,分页-->
  <select id="getLimitedCidByUid" resultType="INTEGER">
        select cid
        from course_selected
        where uid = #{uid}
          and ischoose = 1
        limit #{index}, #{limit}
    </select>

  <!--已选课程的评价信息-->
  <select id="getLimitedRemarkByUid" resultMap="BaseResultMap">
        select cid, course_code, mark, content, content_date
        from course_selected
        where uid = #{uid}
          and ischoose = 1
        limit #{index}, #{limit}
    </select>

  <!-- 根据cid，uid选出评价内容，如果评价（or）不为空，flag设为1，evaluation的total不更新 -->
  <select id="getMyRemarkByCidAndUid" resultMap="BaseResultMap">
        select mark, content, course_code, cid
        from course_selected
        where uid = #{uid}
          and cid = #{cid}
    </select>

  <!-- 保存/更新评价内容(注意还有Evaluation表要改) -->
  <update id="updateRemarkByCidAndUid">
        update course_selected
        set content      = #{content},
            mark         = #{mark},
            content_date = #{content_date}
        where cid = #{cid}
          and uid = #{uid}
    </update>

  <!--根据course_code选出当前课程的所有评分-->
  <select id="getAllMarkByCourse_code" resultType="INTEGER">
        select mark
        from course_selected
        where course_code = #{courseCode}
    </select>


</mapper>